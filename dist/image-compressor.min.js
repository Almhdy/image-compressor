/*!
 * Image Compressor v0.3.0
 * https://github.com/xkeshi/image-compressor
 *
 * Copyright (c) 2017 Xkeshi
 * Released under the MIT license
 *
 * Date: 2017-07-31T07:16:27.061Z
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.ImageCompressor=t()}(this,function(){"use strict";function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var t=function(e,t){return t={exports:{}},e(t,t.exports),t.exports}(function(e){!function(t){var n=t.HTMLCanvasElement&&t.HTMLCanvasElement.prototype,r=t.Blob&&function(){try{return Boolean(new Blob)}catch(e){return!1}}(),o=r&&t.Uint8Array&&function(){try{return 100===new Blob([new Uint8Array(100)]).size}catch(e){return!1}}(),i=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||t.MSBlobBuilder,a=/^data:((.*?)(;charset=.*?)?)(;base64)?,/,l=(r||i)&&t.atob&&t.ArrayBuffer&&t.Uint8Array&&function(e){var t,n,l,s,u,c,f,h,m;if(!(t=e.match(a)))throw new Error("invalid data URI");for(n=t[2]?t[1]:"text/plain"+(t[3]||";charset=US-ASCII"),l=!!t[4],s=e.slice(t[0].length),u=l?atob(s):decodeURIComponent(s),c=new ArrayBuffer(u.length),f=new Uint8Array(c),h=0;h<u.length;h+=1)f[h]=u.charCodeAt(h);return r?new Blob([o?f:c],{type:n}):((m=new i).append(c),m.getBlob(n))};t.HTMLCanvasElement&&!n.toBlob&&(n.mozGetAsFile?n.toBlob=function(e,t,r){e(r&&n.toDataURL&&l?l(this.toDataURL(t,r)):this.mozGetAsFile("blob",t))}:n.toDataURL&&l&&(n.toBlob=function(e,t,n){e(l(this.toDataURL(t,n)))})),e.exports?e.exports=l:t.dataURLtoBlob=l}(window)}),n=Object.prototype.toString,r=function(e){return e instanceof Blob||"[object Blob]"===n.call(e)},o={width:void 0,height:void 0,quality:.8,mimeType:"auto",convertSize:5e6,success:null,error:null},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),l=window.URL||window.webkitURL,s=window.FileReader,u=/^image\/.+$/;return function(){function n(t,r){e(this,n),this.result=null,t&&this.compress(t,r)}return a(n,[{key:"compress",value:function(e,n){var a=this,c=new Image;return n=i({},o,n),new Promise(function(t,n){if(r(e))if(u.test(e.type))if(l)t(l.createObjectURL(e));else if(s){var o=new s;o.onload=function(e){return t(e.file.result)},o.onabort=n,o.onerror=n,o.readAsDataURL(e)}else n("The current browser does not support image compression.");else n("The first argument must be an image File or Blob object.");else n("The first argument must be a File or Blob object.")}).then(function(t){return new Promise(function(n,r){c.onload=function(){n({width:c.naturalWidth,height:c.naturalHeight})},c.onabort=r,c.onerror=r,c.alt=e.name,c.src=t})}).then(function(r){var o=r.width,i=r.height;return new Promise(function(r){var a=document.createElement("canvas"),l=a.getContext("2d"),s=o/i,f=o,h=i;n.width>0?h=(f=n.width)/s:n.height>0&&(f=(h=n.height)*s),a.width=f,a.height=h,l.drawImage(c,0,0,f,h),u.test(n.mimeType)||(n.mimeType=e.type),e.size>n.convertSize&&"image/png"===n.mimeType&&(n.mimeType="image/jpeg"),a.toBlob?a.toBlob(r,n.mimeType,n.quality):r(t(a.toDataURL(n.mimeType,n.quality)))})}).then(function(t){if(l&&l.revokeObjectURL(c.src),t)if(t.size>e.size&&!(n.width>0||n.height>0))t=e;else{var r=new Date;t.lastModified=r.getTime(),t.lastModifiedDate=r,t.name=e.name}else t=e;return a.result=t,n.success&&n.success(t),Promise.resolve(t)}).catch(function(e){if(!n.error)throw e;n.error(new Error(e))})}}]),n}()});